const mongoose = require('mongoose');
const Bank = require('./models/Bank');
const Country = require('./models/Country');
require('dotenv').config();

async function migrateBanksToCountryId() {
  try {
    // Conectar a la base de datos
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Conectado a MongoDB');

    // Obtener todos los bancos que tienen countryCode pero no countryId
    const banksToMigrate = await Bank.find({}).lean(); // usar .lean() para obtener datos sin el modelo

    console.log(`üìä Encontrados ${banksToMigrate.length} bancos para revisar`);

    for (const bank of banksToMigrate) {
      if (bank.countryCode && !bank.countryId) {
        // Buscar el pa√≠s correspondiente por c√≥digo ISO
        const country = await Country.findOne({ isoCode: bank.countryCode });
        
        if (country) {
          // Actualizar el banco con el countryId
          await Bank.findByIdAndUpdate(bank._id, {
            countryId: country._id,
            $unset: { countryCode: "" } // Eliminar el campo countryCode
          });
          console.log(`‚úÖ Migrado banco: ${bank.name} (${bank.countryCode}) -> Pa√≠s: ${country.name}`);
        } else {
          console.log(`‚ùå No se encontr√≥ pa√≠s para c√≥digo: ${bank.countryCode} (Banco: ${bank.name})`);
        }
      } else if (bank.countryId) {
        console.log(`‚è≠Ô∏è Banco ya migrado: ${bank.name}`);
      } else {
        console.log(`‚ö†Ô∏è Banco sin countryCode: ${bank.name}`);
      }
    }

    console.log('üéâ Migraci√≥n completada');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error en la migraci√≥n:', error);
    process.exit(1);
  }
}

migrateBanksToCountryId();
